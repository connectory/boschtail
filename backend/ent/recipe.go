// Code generated by entc, DO NOT EDIT.

package ent

import (
	"boschtail/ent/recipe"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Recipe is the model entity for the Recipe schema.
type Recipe struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recipe) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case recipe.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Recipe", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recipe fields.
func (r *Recipe) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recipe.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Recipe.
// Note that you need to call Recipe.Unwrap() before calling this method if this Recipe
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recipe) Update() *RecipeUpdateOne {
	return (&RecipeClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Recipe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recipe) Unwrap() *Recipe {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recipe is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recipe) String() string {
	var builder strings.Builder
	builder.WriteString("Recipe(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Recipes is a parsable slice of Recipe.
type Recipes []*Recipe

func (r Recipes) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
